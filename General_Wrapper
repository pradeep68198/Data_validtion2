package com.rapid.Utilities;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.JavascriptExecutor;
import javax.imageio.ImageIO;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.io.FileUtils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.util.Units;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Point;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.log4testng.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.openqa.selenium.TimeoutException;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;



public class General_Wrapper {
	
	//public static RemoteWebDriver driver;
	public static WebDriver driver;
	public static ExtentTest test;
	public static Logger logger ;
	public ExtentReports extent;
	public static String testCaseName;
	public static String Browser_Name;
	public static String URL,Browser_value;
	public static String testDescription;
	public static String category;
	public static String authors;
	public static String Result_Path;
	public static String Pass_Img;
	public static String Fail_Img,Mail_Path;
	public static String Info_Excel;
	public static String Doc_Path;
	public static String Result="";
	public static String Report_Path;
	public static int count_act=0;
	public static  SimpleDateFormat formatter1;
	public static ArrayList<String> screenshots=new ArrayList<String>();
	public static ArrayList<String> screenshots1=new ArrayList<String>();
	
	public static String Final_report; 

	


	
	
	
	public void Click(By by){
        
        try {
               waitForElement(by);
               
               driver.findElement(by).click();   
              
        } catch (NoSuchElementException e) {
              
        } catch (Exception e) {
              
        }
}
	
public String Get_Text(By by){
String text = null;
try {
waitForElement(by);
text=driver.findElement(by).getText();  

}

catch (NoSuchElementException e) {
reportStep_Only("The text element : "+by+" not Found ", "FAIL");
} 
catch (Exception e) 
{
	
}
            return text ;
     }


	
	
	
	
	
public boolean waitForElement(By by) {
try {
WebDriverWait wait = new WebDriverWait(driver, 30);
wait.until(ExpectedConditions.visibilityOfElementLocated(by));
//reportStep("The element with id: "+by+" is displayed in the page", "PASS");
return true;
}

catch (TimeoutException e) {
return false;
//reportStep("The element with id: "+by+" is not displayed in the page", "FAIL");
}}
	
       public static boolean isElementPresent(By by) {
		
		try {
			  
		        driver.findElement(by);
		      return true;
		     } catch (NoSuchElementException e) {
		         return false;
		    }
		}
  
       
       public boolean Mouseover(By by){
    	try{   
    	WebElement ele=driver.findElement(by);   
   		Actions build=new Actions(driver);
   		Action move=build.moveToElement(ele).build();
   		move.perform();
   		return true;
   		
    	}
    	catch(Exception e){
    		return false;
    	}
   		
   	}
       
       public WebDriver Switchto(WebDriver driver){
   		
   		for(String temp :driver.getWindowHandles()){
   			driver.switchTo().window(temp);
   		}
   		
   		 return driver;

   	
   	}
       
       public boolean selectVisibileText(By by, String value) {
   		try{
   			new Select(driver.findElement(by)).selectByVisibleText(value);

   			return true;
   		} catch (Exception e) {
   			return false;
   			
   		}
   	}
       
       public void acceptAlert() {
   		try {
   			
   			int customwait=0;
   			while (isAlertPresent()==false && customwait!=30){
   				Thread.sleep(1000);
   				customwait=customwait+1;
   			}
   			//reportStep("Alert box is Displayed", "INFO");
   			driver.switchTo().alert().accept();
   			//reportStep("Alert box is clicked", "INFO");
   			
   		
   		} catch (NoAlertPresentException e) {
   			System.out.println("alert is not clicked");
   		} catch (Exception e) {
   			System.out.println("alert is not clicked");
   		}

   	}
       
       public boolean isAlertPresent(){
   	    try{
   	        driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
   	        driver.switchTo().alert();
   	        return true;
   	    }
   	    catch (NoAlertPresentException e) {
   	    	
   	        return false;
   	    }
   	   
   	   
   	}
       
       public boolean verifyTitle(String title) {
    	
   		boolean bReturn = false;
   		try{
   			if (driver.getTitle().equalsIgnoreCase(title)){
   				//eportStep("The title of the page matches with the value :"+title, "PASS");
   				bReturn = true;
   			}else{
   				//reportStep("The title of the page:"+driver.getTitle()+" did not match with the value :"+title, "SUCCESS");

   		}}catch (Exception e) {
   			//reportStep("Unknown exception occured while verifying the title", "FAIL");
   		}
   		return bReturn;
   	}
       
       
       public void Browser_Setup(String browser,String Website) throws InterruptedException, AWTException {
    	   
   		if(browser.equalsIgnoreCase("Chrome")){
   			System.setProperty("webdriver.chrome.driver", "chromedriver.exe"); 
   			ChromeOptions options = new ChromeOptions();
   			options.addArguments("disable-infobars");
   			driver=new ChromeDriver(options);
   			driver.manage().window().fullscreen();
   			driver.get(Website);
   			
   			 
   			
   		}
   		
   		if(browser.equalsIgnoreCase("IE")){
   		System.setProperty("webdriver.ie.driver","IEDriverServer.exe");
        InternetExplorerOptions  capabilities = new InternetExplorerOptions();
        capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
        capabilities.setCapability(InternetExplorerDriver.IGNORE_ZOOM_SETTING, true); 
        capabilities.setCapability(InternetExplorerDriver.ENABLE_PERSISTENT_HOVERING, false);
        capabilities.setCapability(InternetExplorerDriver.REQUIRE_WINDOW_FOCUS, false);
        driver = new InternetExplorerDriver(capabilities);
        System.out.println("11");
     
            //driver=new InternetExplorerDriver();
             driver.manage().window().maximize();
             driver.get(Website);
             System.out.println("22");
            // driver.findElement(By.tagName("html")).sendKeys(Keys.chord(Keys.CONTROL, "0"));
             System.out.println("33");
            Thread.sleep(2000);
           // driver.navigate().refresh();
            System.out.println("44");

   		}
   		
   		if(browser.equalsIgnoreCase("Edge")){
   	   		
   			System.setProperty("webdriver.edge.driver","MicrosoftWebDriver.exe"); 
            
   		 driver = new EdgeDriver();
      System.out.println("11");
     
          
             driver.manage().window().maximize();
             driver.get(Website);
             Thread.sleep(4000);
             Robot robot = new Robot();
             robot.keyPress(KeyEvent.VK_CONTROL);
             robot.keyPress(KeyEvent.VK_0);
             robot.keyRelease(KeyEvent.VK_CONTROL);
             robot.keyRelease(KeyEvent.VK_0);
             Thread.sleep(4000);
             

   		}
   		
   		if(browser.equalsIgnoreCase("Firefox")){
   		
   			System.setProperty("webdriver.gecko.driver","geckodriver.exe");
   			driver=new FirefoxDriver();
   			 driver.manage().window().maximize();
   			
   		}
   		
   		
   			
   		
   	}
       
      
       
       
       
	
	
  
	
	public ExtentReports startResult(){
		try{
			SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy_hh_mm_ss");
			String PP = "Result_"+sdf.format(new Date())+".html";  
			System.out.println(Report_Path);
			Final_report=Report_Path+PP;
			extent = new ExtentReports(Report_Path+PP, true);
			extent.loadConfig(new File("./src/com/rapid/Utilities/extent-config.xml"));
		}catch(Exception e){
			System.out.println("exception throwed in startResult method");
		}
		
		return extent;
		
	}

	public ExtentTest startTestCase(String testCaseName, String testDescription){
		try{
			test = extent.startTest(testCaseName, testDescription);
		}catch(Exception e){
			System.out.println("Exception throwd in startTestCase method");
		}
		return test;
	}

	public void endResult(){
		try{
			extent.flush();
			System.out.println("result has been saved");
		}
		catch(Exception e){
			System.out.println("Exception throwed while endResult method");
		}
		
	}

	public void endTestcase(){
		try{
			
			createDoc(testCaseName, screenshots);
			
			extent.endTest(test);
			
			screenshots.clear();
			
			
		}catch(Exception e){
			System.out.println("Exception throwed while endTestcae method");
		}
		
	}
	
	
public void reportStep(String Name,String desc, String status) throws InvalidFormatException, IOException {
		
		String name = null;
		
		
			
			name=Screenshot(Name,status);
		    
		    screenshots1.add(desc);
			screenshots.add(name);
		
		
		
	
		   if(status.toUpperCase().equals("PASS")){
				 
				test.log(LogStatus.PASS, desc);
			}else if(status.toUpperCase().equals("FAIL")){
				test.log(LogStatus.FAIL, desc+"  "+test.addScreenCapture(name));
				
			
			}else if(status.toUpperCase().equals("INFO")){
				test.log(LogStatus.INFO, desc);
		
			}
		
		
	}
	
	
      public String Screenshot(String Name,String status)throws IOException, InvalidFormatException{
		
    	  String name = null;
    	
    	try {
    		if(status.equalsIgnoreCase("PASS")){
                name=Pass_Img+Name+".jpg";
        		}
        		else{
        			name=Fail_Img+Name+".jpg";
        		}
			FileUtils.copyFile(((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE) , new File(name));
			
		} catch (WebDriverException e) {
			
		} catch (IOException e) {
			
		}
		return name;
	}
      
      
  
      
      public void createDoc(String testCaseName, ArrayList<String> screenshots) throws Exception {
      	try{
      		System.out.println("creating screenshot document....");
      		SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy_hh_mm_ss");
			
              XWPFDocument doc = new XWPFDocument();
              XWPFParagraph p = doc.createParagraph();
              XWPFRun xwpfRun = p.createRun();
              
              
              int size = screenshots.size();
             
              for(int i=0;i<size;i++)
              {
            	  String imgFile1=screenshots1.get(i);
                  String imgFile=screenshots.get(i);
                  int format=XWPFDocument.PICTURE_TYPE_PNG;
                  xwpfRun.setText(imgFile1);
                  xwpfRun.addBreak();
                  if(!(imgFile.equalsIgnoreCase("11"))) {
                  xwpfRun.addPicture (new FileInputStream(imgFile), format, imgFile, Units.toEMU(475), Units.toEMU(280)); // 200x200 pixels
                  //xwpfRun.addBreak(BreakType.PAGE);
                  }
              }
             
              String path=Doc_Path+testCaseName+".docx";
              System.out.println(path);
              FileOutputStream out = new FileOutputStream(path);
           
              doc.write(out);
              out.close();
             
              test.log(LogStatus.INFO, "Screenshot Link  : <a href='"+path+"'>Screenshot link</a>");
             // reportStep("Screenshot Link  : <a href='"+path+"'>Screenshot link</a>", "INFO");
              screenshots1.clear();
              screenshots.clear();
              
      	}
      	catch(Exception e){
      		e.printStackTrace();
      	}
      	
      	
      }
      
      public void Zoomout(int j) throws AWTException{
    	  
    	  for(int i=0; i<j; i++){
              Robot robot = new Robot();
              robot.keyPress(KeyEvent.VK_CONTROL);
              robot.keyPress(KeyEvent.VK_MINUS);
              robot.keyRelease(KeyEvent.VK_CONTROL);
              robot.keyRelease(KeyEvent.VK_MINUS);
              }
      }
      
     public void Zoomin(int j) throws AWTException{
    	  
    	  for(int i=0; i<j; i++){
              Robot robot = new Robot();
              robot.keyPress(KeyEvent.VK_CONTROL);
              robot.keyPress(KeyEvent.VK_ADD);
              robot.keyRelease(KeyEvent.VK_CONTROL);
              robot.keyRelease(KeyEvent.VK_ADD);
              }
      }
      
      
      public void reportStep_Only(String desc, String status) {
    		
    	
    		
    		try{
    			
    			 screenshots1.add(desc);
    	  	     screenshots.add("11");
    			
    		}
    		catch(Exception e){
    			
    		}
    		
    		
    		
    	
    			// Write if it is successful or failure or information
    			if(status.toUpperCase().equals("PASS")){
    				 
    				test.log(LogStatus.PASS, desc);
    			}else if(status.toUpperCase().equals("FAIL")){
    				test.log(LogStatus.FAIL, desc);
    			}else if(status.toUpperCase().equals("INFO")){
    				test.log(LogStatus.INFO, desc);
    				
    			}
    		
    		
    	}
      
      public void File_Copy(String Src,String Desc) throws InterruptedException, IOException{
          File f1= new File(Src);
          File f2= new File(Desc);
          FileUtils.copyFile(f1, f2);

          }
      
      public String[][] readXLSX(String Filepath,String Sheet) throws IOException{
          File excel=new File(Filepath);
          FileInputStream fis=new FileInputStream(excel);
          String Value=null;
          XSSFWorkbook book=new XSSFWorkbook(fis);
          XSSFSheet ws=book.getSheet(Sheet);
          XSSFCell cell;
          
          DataFormatter format=new DataFormatter();
          int rowNum=ws.getLastRowNum()+1;
          int colNum=ws.getRow(0).getLastCellNum();
          
          String[][] Parameter=new String[(colNum)][(rowNum)];
          for(int i=0;i<rowNum;i++){
                 XSSFRow row=ws.getRow(i);
                 for(int j=0;j<colNum;j++){
                        
                        cell=row.getCell(j);
                        if(!(cell==null)){
                              Value=format.formatCellValue(cell);
                        }
                        else{
                              Value=null;
                        }
                        Parameter[j][i]=Value;
                 }
                 
          }
          book.close();
          return Parameter;
          
   }

   public String writeXLSX(String Filepath,String Sheet,String Value,int col,int row) throws IOException{
          String val=Value;
          String main=Sheet;
          FileInputStream fis=new FileInputStream(Filepath);
          XSSFWorkbook book=new XSSFWorkbook(fis);
          XSSFSheet ws=book.getSheet(main);
          ws.getRow(row).createCell(col).setCellValue(Value);
          fis.close();
          FileOutputStream fo=new FileOutputStream(Filepath);
          book.write(fo);
          book.close();
          fo.flush();
          fo.close();
          return val;
   }
   
   
   public void XML_Updater(String tag,String Msg,String report) throws ParserConfigurationException, SAXException, IOException, TransformerException {
		
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
       DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
       Document doc = dBuilder.parse("Result.xml");

      
       
       NodeList nList = doc.getElementsByTagName("Dashboard");
       
       for (int i = 0; i < nList.getLength(); i++) {
       	
       	Node node = nList.item(i);
           if (node.getNodeType() == Node.ELEMENT_NODE) {
               Element element = (Element) node;
               
               String s1 = element.getElementsByTagName("Name").item(0).getTextContent().trim();
               
               
              
               if(s1.equalsIgnoreCase(tag)) {
               	
               	element.getElementsByTagName("Status").item(0).setTextContent(Msg);
				element.getElementsByTagName("ReportPath").item(0).setTextContent(report);
               
               
           }
               
               
               
             
               
           }
       	
       }
       
       TransformerFactory transformerFactory = TransformerFactory.newInstance();
       
       Transformer transformer = transformerFactory.newTransformer();
       DOMSource domSource = new DOMSource(doc);

       StreamResult streamResult = new StreamResult(new File("Result.xml").getPath());
       transformer.transform(domSource, streamResult);
	}
   
   

public String Class_Name_Finder(String val) {
	
	String Final=null;
	
	//Medical Dashboard
	if(val.equalsIgnoreCase("Medical_Page_Test")) {
		Final="Medical Dashboard";		
	}
	
	//Talent Dashboard
		if(val.equalsIgnoreCase("Talent_Page_Test")) {
			Final="Talent Dashboard";
			}
	
	//Executive Summary Dashboard
	if(val.equalsIgnoreCase("Executive_Dashboard_Test")) {
	Final="Executive Summary Dashboard";
	}
	
	//Local Markets Dashboard
	if(val.equalsIgnoreCase("LocalMarket_Dashboard_Test")) {
	Final="Local Markets Dashboard";
	}
		
	//Finance Dashboard
	if(val.equalsIgnoreCase("Finance_Page_Test")) {
	Final="Finance Dashboard";
	}
	
	//Sales Dashboard
	if(val.equalsIgnoreCase("Sales_Page_Test_2")) {
	Final="Sales Dashboard";
	}
	
	//Service Operations Dashboard
	if(val.equalsIgnoreCase("Service_Operations_Test")) {
	Final="Service Operations Dashboard";
	}
	
	//Network Dashboard
	if(val.equalsIgnoreCase("Network_Dashboard_Test")) {
	Final="Network Dashboard";
	}
		
	// Commercial Dashboard
	if(val.equalsIgnoreCase("Commercial_Test")) {
		Final="Commercial Dashboard";		
	}
	
	// Medicare Dashboard
	if(val.equalsIgnoreCase("Medicare_test")) {
	Final="Medicare Dashboard";	
	}
	
	// Medicare Dashboard
	if(val.equalsIgnoreCase("VBC_Test")) {
	Final="Medicare VBC Dashboard";	
	}
	
	// Service Operations Executive Dashboard
	if(val.equalsIgnoreCase("Service_Operations_Executive_Test")) {
	Final="Service Operations Executive Dashboard";	
	}
		
	return Final;
}
   

   
      
     

}

